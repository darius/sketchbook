main   =                    {# This file was generated by metatoo; you probably shouldn't edit it.} :nl
                            {import metalib, re} :nl
                            {def parse(text):} :nl
                            {  pos, vals = parse_main(text, 0, ())} :nl
                            {  if pos != len(text): raise Exception('Failed', pos)} :nl
                            {  return ''.join(vals)} :nl
         _ rules.
rules  = rule rules
       | .

rule   = id /=/ _           {def parse_} :swap {(text, start_pos, start_vals):} :nl
         alts /\./ _
                            {  return None, None} :nl.
alts   =                    {  while True:} :nl
                            {    pos, vals = start_pos, start_vals} :nl
         seq alts2.
alts2  = /\|/ _ alts
       | .
seq    = token seq
       |                    {    return pos, vals} :nl.

token  = /{/ qchars /}/ _   {    vals += (} :swap :quote {,)} :nl
       | /\// xchars /\// _ {    m = re.match(} :swap :quote {, text[pos:])} :nl
                            {    if not m: break} :nl
                            {    pos, vals = pos + m.end(), vals + m.groups()} :nl
       | id                 {    pos, vals = parse_} :swap {(text, pos, vals)} :nl
                            {    if pos is None: break} :nl
       | /:/ id             {    vals = metalib.} :swap {(vals)} :nl.

qchars = /([^}])/ qchars    :cat
       |                    {}.

xchars = /(\\.|[^\/])/ xchars  :cat
       |                       {}.

id     = /([a-zA-Z_]\w*)/ _.
_      = /\s*/.
